/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.yahoo.turkbuck.commandstacker;

import nu.studer.java.util.OrderedProperties;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class App {

    static final String regExSpecialChars = "\\\"";
    static final String regExSpecialCharsRE = regExSpecialChars.replaceAll(".", "\\\\$0");
    static final Pattern reCharsREP = Pattern.compile("[" + regExSpecialCharsRE + "]");
    public static JFrame frame = new JFrame("Command Stacker - by thecolonel63");
    public static JPanel commandList = new JPanel();
    public static JTextField itemNameTextField;
    public static JTextField itemTypeTextField;
    public static JTextField itemLoreTextField;
    public static JTextField summonXTextField;
    public static JTextField summonYTextField;
    public static JTextField summonZTextField;
    static JCheckBox summonCheckBox = new JCheckBox("Disable wrapping /summon command inside spawn egg");
    static JCheckBox towerCheckBox = new JCheckBox("Keep stack on completion instead of removing");
    static JCheckBox mediumLengthWarning = new JCheckBox("Hide warning about command being longer than 256 characters");
    static JCheckBox longLengthWarning = new JCheckBox("Hide warning about command being longer than max packet size in Multiplayer");

    static String quoteRegExSpecialChars(String s) {
        Matcher m = reCharsREP.matcher(s);
        return m.replaceAll("\\\\$0");
    }

    public static void loadConfigFile() throws IOException {
        OrderedProperties properties = new OrderedProperties();
        properties.load(new FileInputStream("command_stacker.properties"));
        summonCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty("keepAsSummonCommand")));
        towerCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty("keepTowerOnCompletion")));
        mediumLengthWarning.setSelected(Boolean.parseBoolean(properties.getProperty("disableCommandLengthWarning")));
        longLengthWarning.setSelected(Boolean.parseBoolean(properties.getProperty("disableLargePacketSizeWarning")));
        itemNameTextField.setText(properties.getProperty("itemName"));
        itemTypeTextField.setText(properties.getProperty("itemType"));
        itemLoreTextField.setText(properties.getProperty("itemLore"));
        summonXTextField.setText(properties.getProperty("summonX"));
        summonYTextField.setText(properties.getProperty("summonY"));
        summonZTextField.setText(properties.getProperty("summonZ"));
    }

    public static void saveConfigFile() throws IOException {
        OrderedProperties properties = new OrderedProperties();
        properties.setProperty("keepAsSummonCommand", String.valueOf(summonCheckBox.isSelected()));
        properties.setProperty("keepTowerOnCompletion", String.valueOf(towerCheckBox.isSelected()));
        properties.setProperty("disableCommandLengthWarning", String.valueOf(mediumLengthWarning.isSelected()));
        properties.setProperty("disableLargePacketSizeWarning", String.valueOf(longLengthWarning.isSelected()));
        properties.setProperty("itemName", itemNameTextField.getText());
        properties.setProperty("itemType", itemTypeTextField.getText());
        properties.setProperty("itemLore", itemLoreTextField.getText());
        properties.setProperty("summonX", summonXTextField.getText());
        properties.setProperty("summonY", summonYTextField.getText());
        properties.setProperty("summonZ", summonZTextField.getText());
        properties.store(new FileWriter("command_stacker.properties"), "Command Stacker Properties File");
    }

    public static void main(String[] args) {

        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            public void run() {
                try {
                    saveConfigFile();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }));

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1000, 600);
        frame.setResizable(false);

        commandList.setLayout(new BoxLayout(commandList, BoxLayout.Y_AXIS));

        final JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".mcfunction", "mcfunction");
        chooser.setFileFilter(filter);

        JMenuBar menuBar = new JMenuBar();
        JMenu file = new JMenu("File");
        JMenu options = new JMenu("Options");
        JMenu itemDetails = new JMenu("Item Details");
        JMenu summonDetails = new JMenu("Summon Command Details");
        summonCheckBox.setVisible(true);
        menuBar.add(file);
        menuBar.add(options);
        menuBar.add(itemDetails);
        menuBar.add(summonDetails);

        JPanel itemNamePanel = new JPanel();
        JLabel itemNameLabel = new JLabel("Item Name:");
        itemNameTextField = new JTextField("Command Stack", 48);
        itemNamePanel.add(itemNameLabel);
        itemNamePanel.add(itemNameTextField);

        JPanel itemTypePanel = new JPanel();
        JLabel itemTypeLabel = new JLabel("Item Type:");
        itemTypeTextField = new JTextField("minecraft:zoglin_spawn_egg", 48);
        itemTypePanel.add(itemTypeLabel);
        itemTypePanel.add(itemTypeTextField);

        JPanel itemLorePanel = new JPanel();
        JLabel itemLoreLabel = new JLabel("Item Lore:");
        itemLoreTextField = new JTextField("A Command Stack generated by thecolonel63's Command Block Stacker", 48);
        itemLorePanel.add(itemLoreLabel);
        itemLorePanel.add(itemLoreTextField);

        itemDetails.add(itemNamePanel);
        itemDetails.add(itemTypePanel);
        itemDetails.add(itemLorePanel);

        JPanel summonXPanel = new JPanel();
        JLabel summonXLabel = new JLabel("X: ");
        summonXTextField = new JTextField("~", 8);
        summonXPanel.add(summonXLabel);
        summonXPanel.add(summonXTextField);

        JPanel summonYPanel = new JPanel();
        JLabel summonYLabel = new JLabel("Y: ");
        summonYTextField = new JTextField("~1.5", 8);
        summonYPanel.add(summonYLabel);
        summonYPanel.add(summonYTextField);

        JPanel summonZPanel = new JPanel();
        JLabel summonZLabel = new JLabel("Z: ");
        summonZTextField = new JTextField("~", 8);
        summonZPanel.add(summonZLabel);
        summonZPanel.add(summonZTextField);

        summonDetails.add(summonXPanel);
        summonDetails.add(summonYPanel);
        summonDetails.add(summonZPanel);

        JPanel controlBar = new JPanel();
        JTextField inputText = new JTextField(16);

        JButton confirm = new JButton("Confirm");
        confirm.addActionListener(e -> {
            if (!inputText.getText().equals("")) {
                addCommandToList(inputText.getText().trim());
                inputText.setText("");
            }
        });

        JButton copy = new JButton("Copy to Clipboard");
        copy.addActionListener(e -> addToClipboard(getListOfCommands(commandList), true));

        JButton clear = new JButton("Clear command list");
        clear.addActionListener(e -> {
            commandList.removeAll();
            commandList.setVisible(false);
            commandList.setVisible(true);
        });

        JMenuItem open = new JMenuItem(new AbstractAction("Open .mcfunction File") {
            @Override
            public void actionPerformed(ActionEvent e) {
                int r = chooser.showOpenDialog(null);
                if (r == JFileChooser.APPROVE_OPTION) {
                    commandList.removeAll();
                    try (BufferedReader br = new BufferedReader(new FileReader(chooser.getSelectedFile()))) {
                        String line;
                        while ((line = br.readLine()) != null) {
                            addCommandToList(line);
                        }
                    } catch (IOException ignored) {
                    }
                }
            }
        });

        JMenuItem about = new JMenuItem(new AbstractAction("About Command Stacker") {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(frame, "A simple command stacker for modern Minecraft versions written in Java by thecolonel63.");
            }
        });

        options.add(summonCheckBox);
        options.add(towerCheckBox);
        options.add(mediumLengthWarning);
        options.add(longLengthWarning);

        file.add(open);
        file.add(about);
        controlBar.add(new JLabel("Enter Command: "));
        controlBar.add(inputText);
        controlBar.add(confirm);
        controlBar.add(copy);
        controlBar.add(clear);

        JScrollPane commandListScroller = new JScrollPane(commandList);

        frame.getContentPane().add(BorderLayout.SOUTH, controlBar);
        frame.getContentPane().add(BorderLayout.NORTH, menuBar);
        frame.getContentPane().add(BorderLayout.CENTER, commandListScroller);

        File configFile = new File("command_stacker.properties");
        if(configFile.exists()) {
            try {
                loadConfigFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        frame.setVisible(true);
        frame.getRootPane().setDefaultButton(confirm);

    }

    public static void addCommandToList(String command) {
        JPanel newCommandBar = new JPanel();
        newCommandBar.setLayout(new BoxLayout(newCommandBar, BoxLayout.X_AXIS));
        newCommandBar.setAlignmentX(Component.LEFT_ALIGNMENT);

        JButton edit = new JButton("Edit");
        edit.addActionListener(e -> {
            String editedMessage = JOptionPane.showInputDialog(frame, "Type new command: ", ((JLabel) newCommandBar.getComponent(0)).getText().substring(9));
            if (editedMessage == null || (("".equals(editedMessage)))) {
                return;
            }
            ((JLabel) newCommandBar.getComponent(0)).setText("Command: " + editedMessage);
        });

        JButton copy = new JButton("Copy");
        copy.addActionListener(e -> addToClipboard(((JLabel) newCommandBar.getComponent(0)).getText().substring(9), false));

        JButton remove = new JButton("Remove");
        remove.addActionListener(e -> {
            commandList.remove(newCommandBar);
            commandList.setVisible(false);
            commandList.setVisible(true);
        });

        JButton moveUp = new JButton("/\\");
        moveUp.addActionListener(e -> {
            int commandBarPos = 0;
            for (int i = 0; i < commandList.getComponents().length; i++) {
                if (commandList.getComponent(i).equals(newCommandBar)) {
                    commandBarPos = i;
                }
            }
            if (commandBarPos >= 1) {
                commandList.add(newCommandBar, commandBarPos - 1);
                commandList.setVisible(false);
                commandList.setVisible(true);
            }
        });

        JButton moveDown = new JButton("\\/");
        moveDown.addActionListener(e -> {
            int commandBarPos = 0;
            for (int i = 0; i < commandList.getComponents().length; i++) {
                if (commandList.getComponent(i).equals(newCommandBar)) {
                    commandBarPos = i;
                }
            }
            if (commandBarPos < commandList.getComponents().length - 1) {
                commandList.add(newCommandBar, commandBarPos + 1);
                commandList.setVisible(false);
                commandList.setVisible(true);
            }
        });

        JLabel commandText = new JLabel("Command: " + command + "");
        commandText.setMinimumSize(new Dimension(704, 30));
        commandText.setPreferredSize(new Dimension(704, 30));
        commandText.setMaximumSize(new Dimension(704, 30));

        newCommandBar.add(commandText);
        newCommandBar.add(edit);
        newCommandBar.add(copy);
        newCommandBar.add(remove);
        newCommandBar.add(moveUp);
        newCommandBar.add(moveDown);

        commandList.add(newCommandBar);
        commandList.setVisible(false);
        commandList.setVisible(true);

    }

    public static void addToClipboard(String content, boolean isCommand) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        StringSelection sel = new StringSelection(content);
        clipboard.setContents(sel, null);
        if (!isCommand) {
            JOptionPane.showMessageDialog(frame, "Copied text to clipboard!");
            return;
        }
        if (content.length() >= 65450 && !longLengthWarning.isSelected()) {
            JOptionPane.showMessageDialog(frame, "Warning! This will not work on Servers due to the size! You have been warned!", "Command Stacker", JOptionPane.PLAIN_MESSAGE);
        } else if (content.length() > 256 && !mediumLengthWarning.isSelected()) {
            JOptionPane.showMessageDialog(frame, "Warning! You will need to use a command block to give yourself this!");
        } else {
            JOptionPane.showMessageDialog(frame, "Command Copied Successfully!", "Command Stacker", JOptionPane.PLAIN_MESSAGE);
        }
    }

    public static String getListOfCommands(JPanel panel) {


        String lore = "";
        if (!itemLoreTextField.equals("")) {
            lore = "Lore:['\"" + itemLoreTextField.getText().replace("\"", "\\\"").replace("'", "\\'").replace("\\n", "\"','\"") + "\"'],";
        }
        String itemStart = "/give @p " + itemTypeTextField.getText() + "{display:{" + lore + "Name:'{\"text\":\"" + itemNameTextField.getText().replace("\"", "\\\"").replace("'", "\\'") + "\",\"italic\":\"false\"}'},EntityTag:{BlockState:{Name:\"command_block\",Properties:{facing:\"up\"}},TileEntityData:{Command:\"";
        String summonStart = "/summon falling_block " + summonXTextField.getText() + " " + summonYTextField.getText() + " " + summonZTextField.getText() + " {BlockState:{Name:\"command_block\",Properties:{facing:\"up\"}},TileEntityData:{Command:\"";
        String itemEnd = "\",auto:1b},Time:1,id:\"falling_block\"}}";
        String summonEnd = "\",auto:1b},Time:-2147483647}";
        String starter = "summon minecraft:falling_block ~ ~0.75 ~ ";
        String spacerStart = "{id:\"falling_block\",Time:599,DropItem:0,Passengers:[";
        String dataStart = "{id:\"falling_block\",Time:-2147483647,Tags:[\"TempFallBlock\"],BlockState:{Name:\"command_block\",Properties:{facing:\"up\"}},TileEntityData:{Command:\"";
        String dataMid = "\",auto:1},Passengers:[";
        String dataEnd = "]}";
        StringBuilder commandList;
        Component[] children = panel.getComponents();

        commandList = new StringBuilder(starter);

        int commandCount = 0;

        commandList.append(spacerStart).append(dataStart).append("fill ~ ~ ~ ~ ~-1 ~ air").append(dataMid);

        for (Component sp : children) {
            if (sp instanceof JPanel) {
                for (Component sp2 : ((JPanel) sp).getComponents()) {
                    if (sp2 instanceof JLabel) {
                        commandList.append(spacerStart).append(dataStart).append(quoteRegExSpecialChars(((JLabel) sp2).getText().substring(9))).append(dataMid);
                        commandCount++;
                    }
                }
            }
        }

        if (!towerCheckBox.isSelected()) {
            commandList.append(spacerStart).append(dataStart).append(quoteRegExSpecialChars("fill ~ ~ ~ ~ ~-" + commandCount + " ~ air")).append(dataMid);
        }

        for (int i = 0; i < panel.getComponentCount(); i++) {
            commandList.append(dataEnd).append(dataEnd);
        }

        commandList.append(dataEnd).append(dataEnd);

        if (!towerCheckBox.isSelected()) commandList.append(dataEnd).append(dataEnd);

        if (summonCheckBox.isSelected()) {
            return summonStart + quoteRegExSpecialChars(commandList.toString()) + summonEnd;
        } else {
            return itemStart + quoteRegExSpecialChars(commandList.toString()) + itemEnd;
        }

    }
}
